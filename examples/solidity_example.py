"""
Example: Using Solidity contracts with Stellaris BPF VM
This example shows how to deploy and interact with Solidity contracts
"""

import asyncio
import requests
import json
from typing import Dict, Any

class SolidityExample:
    """Example of deploying and interacting with Solidity contracts"""
    
    def __init__(self, node_url: str = "http://localhost:3006"):
        self.node_url = node_url
        
    def deploy_simple_storage_contract(self) -> Dict[str, Any]:
        """
        Deploy a simple storage contract
        
        Solidity contract:
        ```solidity
        pragma solidity ^0.8.0;
        
        contract SimpleStorage {
            uint256 public value;
            
            function setValue(uint256 _value) public {
                value = _value;
            }
            
            function getValue() public view returns (uint256) {
                return value;
            }
        }
        ```
        """
        # This would be generated by solc (Solidity compiler)
        # For this example, we'll use a simplified bytecode
        bytecode = "608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633fa4f2451461003b57806355241077146100595b600080fd5b610043610075565b6040516100509190610098565b60405180910390f35b610073600480360381019061006e91906100d4565b61007b565b005b60005481565b8060008190555050565b6000819050919050565b61009281610085565b82525050565b60006020820190506100ad6000830184610089565b92915050565b600080fd5b6100c181610085565b81146100cc57600080fd5b50565b6000813590506100de816100b8565b92915050565b6000602082840312156100fa576100f96100b3565b5b6000610108848285016100cf565b9150509291505056fea264697066735822122012345678901234567890123456789012345678901234567890123456789012345664736f6c634300080a0033"
        
        # Solidity ABI
        abi = [
            {
                "inputs": [],
                "name": "getValue",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_value",
                        "type": "uint256"
                    }
                ],
                "name": "setValue",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "value",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ]
        
        # Deploy contract
        deployment_data = {
            "bytecode": bytecode,
            "abi": abi,
            "inputs": [{"tx_hash": "0" * 64, "index": 0}],
            "outputs": [{"address": "solidity_deployer", "amount": "0"}],
            "gas_limit": 1000000,
            "contract_type": "evm"
        }
        
        response = requests.post(f"{self.node_url}/deploy_contract", json=deployment_data)
        return response.json()
    
    def call_contract_function(self, contract_address: str, function_name: str, args: list) -> Dict[str, Any]:
        """Call a contract function"""
        call_data = {
            "contract_address": contract_address,
            "function_name": function_name,
            "args": args,
            "inputs": [{"tx_hash": "0" * 64, "index": 0}],
            "outputs": [{"address": "function_caller", "amount": "0"}],
            "gas_limit": 100000
        }
        
        response = requests.post(f"{self.node_url}/call_contract", json=call_data)
        return response.json()
    
    def web3_deploy_contract(self, bytecode: str) -> Dict[str, Any]:
        """Deploy contract using Web3-compatible interface"""
        tx_data = {
            "data": bytecode,
            "gas": "0xF4240"  # 1000000 in hex
        }
        
        response = requests.post(f"{self.node_url}/eth_sendTransaction", json=tx_data)
        return response.json()
    
    def web3_call_contract(self, contract_address: str, call_data: str) -> Dict[str, Any]:
        """Call contract using Web3-compatible interface"""
        call_request = {
            "to": contract_address,
            "data": call_data
        }
        
        response = requests.post(f"{self.node_url}/eth_call", json=call_request)
        return response.json()
    
    def get_chain_id(self) -> Dict[str, Any]:
        """Get chain ID for Web3 compatibility"""
        response = requests.get(f"{self.node_url}/eth_chainId")
        return response.json()
    
    def get_balance(self, address: str) -> Dict[str, Any]:
        """Get balance for Web3 compatibility"""
        balance_data = {"address": address}
        response = requests.post(f"{self.node_url}/eth_getBalance", json=balance_data)
        return response.json()


def run_solidity_example():
    """Run the Solidity example"""
    print("üöÄ Stellaris Solidity Integration Example")
    print("=" * 50)
    
    example = SolidityExample()
    
    # Test Web3 endpoints
    print("\n1. Testing Web3 compatibility endpoints:")
    
    # Get chain ID
    chain_id = example.get_chain_id()
    print(f"   Chain ID: {chain_id}")
    
    # Get balance
    balance = example.get_balance("0x1234567890123456789012345678901234567890")
    print(f"   Balance: {balance}")
    
    # Deploy contract using Stellaris API
    print("\n2. Deploying SimpleStorage contract:")
    deployment_result = example.deploy_simple_storage_contract()
    print(f"   Deployment result: {deployment_result}")
    
    if deployment_result.get('ok'):
        contract_address = deployment_result.get('contract_address', 'pending')
        print(f"   Contract address: {contract_address}")
        
        # Call contract function
        print("\n3. Calling contract functions:")
        
        # Set value
        set_result = example.call_contract_function(contract_address, "setValue", [42])
        print(f"   Set value result: {set_result}")
        
        # Get value
        get_result = example.call_contract_function(contract_address, "getValue", [])
        print(f"   Get value result: {get_result}")
    
    # Test Web3 deployment
    print("\n4. Testing Web3-compatible deployment:")
    web3_deploy_result = example.web3_deploy_contract(
        "608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633fa4f2451461003b57806355241077146100595b600080fd5b610043610075565b6040516100509190610098565b60405180910390f35b610073600480360381019061006e91906100d4565b61007b565b005b60005481565b8060008190555050565b6000819050919050565b61009281610085565b82525050565b60006020820190506100ad6000830184610089565b92915050565b600080fd5b6100c181610085565b81146100cc57600080fd5b50565b6000813590506100de816100b8565b92915050565b6000602082840312156100fa576100f96100b3565b5b6000610108848285016100cf565b9150509291505056fea264697066735822122012345678901234567890123456789012345678901234567890123456789012345664736f6c634300080a0033"
    )
    print(f"   Web3 deployment result: {web3_deploy_result}")
    
    print("\n‚úÖ Solidity integration example completed!")
    print("\nNow you can use Hardhat with Stellaris:")
    print("1. Configure Hardhat to use http://localhost:3006")
    print("2. Set network ID to 1337")
    print("3. Deploy contracts using 'npx hardhat deploy'")
    print("4. Interact with contracts using Web3.js or ethers.js")


def create_hardhat_config():
    """Create a sample Hardhat configuration for Stellaris"""
    hardhat_config = """
require("@nomiclabs/hardhat-waffle");

module.exports = {
  solidity: "0.8.4",
  networks: {
    stellaris: {
      url: "http://localhost:3006",
      chainId: 1337,
      accounts: [
        // Add your private keys here
        "0x1234567890123456789012345678901234567890123456789012345678901234"
      ]
    }
  }
};
"""
    
    with open("hardhat.config.js", "w") as f:
        f.write(hardhat_config)
    
    print("üìù Created hardhat.config.js for Stellaris integration")
    print("   Edit the file to add your private keys and customize settings")


if __name__ == "__main__":
    try:
        run_solidity_example()
        create_hardhat_config()
    except requests.exceptions.ConnectionError:
        print("‚ùå Could not connect to Stellaris node at http://localhost:3006")
        print("   Please make sure the node is running first")
    except Exception as e:
        print(f"‚ùå Error running example: {e}")